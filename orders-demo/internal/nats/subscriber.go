package nats

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"time"

	"orders-demo/internal/cache"
	"orders-demo/internal/db"
	"orders-demo/internal/model"

	"github.com/nats-io/stan.go"
)

// StartSubscriber –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ NATS Streaming, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç JSON-–∑–∞–∫–∞–∑—ã
func StartSubscriber(pg *db.Postgres, c *cache.Cache) {
	clusterID := "test-cluster" // –∏–º—è –∫–ª–∞—Å—Ç–µ—Ä–∞ (–¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å —Ç–µ–º, —á—Ç–æ —É–∫–∞–∑–∞–Ω–æ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ NATS)
	clientID := "order-subscriber"
	channel := "orders" // –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –ø–æ–¥–ø–∏—Å–∫–∏
	url := "nats://localhost:4222"

	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ NATS Streaming
	sc, err := stan.Connect(clusterID, clientID, stan.NatsURL(url))
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ NATS Streaming: %v", err)
	}
	defer sc.Close()

	fmt.Println("üì° –ü–æ–¥–ø–∏—Å—á–∏–∫ –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ NATS Streaming...")

	// –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª "orders"
	_, err = sc.Subscribe(channel, func(msg *stan.Msg) {
		fmt.Printf("üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: %s\n", msg.Data)

		var order model.Order
		if err := json.Unmarshal(msg.Data, &order); err != nil {
			fmt.Println("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:", err)
			return
		}

		ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
		defer cancel()

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –ë–î
		if err := pg.SaveOrder(ctx, order); err != nil {
			fmt.Println("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î:", err)
			return
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à
		c.Set(order.OrderUID, model.CachedOrder{
			Order:      order,
			PayloadRaw: msg.Data,
			LoadedAt:   time.Now(),
		})

		fmt.Printf("üíæ –ó–∞–∫–∞–∑ %s —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫—ç—à\n", order.OrderUID)
	}, stan.DeliverAllAvailable())

	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: %v", err)
	}

	// –ß—Ç–æ–±—ã —Å–µ—Ä–≤–∏—Å –Ω–µ –∑–∞–≤–µ—Ä—à–∞–ª—Å—è
	select {}
}
