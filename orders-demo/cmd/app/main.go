package main

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"os"
	"time"

	"orders-demo/internal/api"
	"orders-demo/internal/cache"
	"orders-demo/internal/db"
	"orders-demo/internal/nats"
)

func main() {
	fmt.Println("üöÄ Orders Demo Service starting...")

	connStr := "postgres://orders_user:StrongP@ssw0rd@localhost:5432/orders_db?sslmode=disable"

	pg, err := db.New(connStr)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Postgres: %v", err)
	}
	defer pg.Pool.Close()

	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	if err := pg.InitSchema(ctx); err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ö–µ–º—ã: %v", err)
	}

	c := cache.New()
	data, err := pg.LoadAll(ctx)
	if err == nil {
		c.LoadAll(data)
		fmt.Printf("üîÅ –ö—ç—à –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %d –∑–∞–ø–∏—Å–µ–π\n", len(data))
	} else {
		fmt.Println("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î:", err)
	}

	h := api.NewHandler(c)
	go nats.StartSubscriber(pg, c)

	port := "8080"
	if p := os.Getenv("PORT"); p != "" {
		port = p
	}

	// --- –°–æ–∑–¥–∞—ë–º –æ—Ç–¥–µ–ª—å–Ω—ã–π mux –¥–ª—è —Ñ—Ä–æ–Ω—Ç–∞ ---
	mux := http.NewServeMux()

	// API –æ—Ç–¥–∞—ë–º —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–æ—É—Ç–µ—Ä
	mux.Handle("/orders/", h.Router())

	// –§—Ä–æ–Ω—Ç –æ—Ç–¥–∞—ë–º —Å—Ç–∞—Ç–∏–∫–æ–π
	fs := http.FileServer(http.Dir("./web"))
	mux.Handle("/", fs) // —Ç–æ–ª—å–∫–æ "/" –∏ –≤—Å—ë, —á—Ç–æ –Ω–µ /orders/*

	fmt.Printf("üåê HTTP server started on port %s\n", port)
	log.Fatal(http.ListenAndServe(":"+port, mux))
}
